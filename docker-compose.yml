services:
  # Auth Microservice
  auth-service:
    container_name: authentication-ms
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      # Application configuration
      APP_ENV: ${APP_ENV:-development}
      APP_NAME: auth-microservice
      SERVER_PORT: 8080
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-auth_microservice_dev}
      DB_USERNAME: ${DB_USERNAME:-auth_user}
      DB_PASSWORD: ${DB_PASSWORD:-dev_password_123}
      DB_POOL_MAX_SIZE: ${DB_POOL_MAX_SIZE:-20}
      DB_POOL_MAX_WAIT_QUEUE: ${DB_POOL_MAX_WAIT_QUEUE:-50}
      DB_CONNECTION_TIMEOUT: ${DB_CONNECTION_TIMEOUT:-30000}
      DB_IDLE_TIMEOUT: ${DB_IDLE_TIMEOUT:-600000}
      DB_RECONNECT_ATTEMPTS: ${DB_RECONNECT_ATTEMPTS:-3}
      DB_RECONNECT_INTERVAL: ${DB_RECONNECT_INTERVAL:-1000}
      DB_HEALTH_CHECK_INTERVAL: ${DB_HEALTH_CHECK_INTERVAL:-30000}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password}
      REDIS_DATABASE: ${REDIS_DATABASE:-0}
      REDIS_CONNECTION_TIMEOUT: ${REDIS_CONNECTION_TIMEOUT:-5000}
      REDIS_COMMAND_TIMEOUT: ${REDIS_COMMAND_TIMEOUT:-3000}
      
      # JWT configuration
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-key-for-development-only-not-secure-enough-for-production}
      JWT_ISSUER: ${JWT_ISSUER:-auth-microservice-dev}
      JWT_ACCESS_TOKEN_EXPIRY: ${JWT_ACCESS_TOKEN_EXPIRY:-3600}
      JWT_REFRESH_TOKEN_EXPIRY: ${JWT_REFRESH_TOKEN_EXPIRY:-86400}
      
      # Security configuration
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-8}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_LOGIN_ATTEMPTS: ${RATE_LIMIT_LOGIN_ATTEMPTS:-10}
      RATE_LIMIT_LOGIN_WINDOW_MINUTES: ${RATE_LIMIT_LOGIN_WINDOW_MINUTES:-15}
      RATE_LIMIT_LOGIN_BLOCK_MINUTES: ${RATE_LIMIT_LOGIN_BLOCK_MINUTES:-30}
      RATE_LIMIT_API_REQUESTS_PER_MINUTE: ${RATE_LIMIT_API_REQUESTS_PER_MINUTE:-200}
      
      # CORS configuration
      CORS_ENABLED: ${CORS_ENABLED:-true}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-*}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,POST,PUT,DELETE,OPTIONS,PATCH}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:-*}
      CORS_MAX_AGE: ${CORS_MAX_AGE:-3600}
      
      # Monitoring configuration
      METRICS_ENABLED: ${METRICS_ENABLED:-true}
      METRICS_PORT: ${METRICS_PORT:-9090}
      HEALTH_CHECK_ENABLED: ${HEALTH_CHECK_ENABLED:-true}
      HEALTH_CHECK_PORT: ${HEALTH_CHECK_PORT:-8081}
      
      # Logging configuration
      LOG_FORMAT: ${LOG_FORMAT:-pretty}
      LOG_FILE_ENABLED: ${LOG_FILE_ENABLED:-true}
      LOG_FILE_PATH: ${LOG_FILE_PATH:-logs/auth-microservice-dev.log}
      LOG_FILE_MAX_SIZE: ${LOG_FILE_MAX_SIZE:-5MB}
      LOG_FILE_MAX_FILES: ${LOG_FILE_MAX_FILES:-3}
      
      # External services
      EMAIL_ENABLED: ${EMAIL_ENABLED:-false}
      GEOLOCATION_ENABLED: ${GEOLOCATION_ENABLED:-false}
      
      # Development specific
      DEV_MODE: ${DEV_MODE:-true}
      DEV_AUTO_RELOAD: ${DEV_AUTO_RELOAD:-true}
      DEV_MOCK_EXTERNAL_SERVICES: ${DEV_MOCK_EXTERNAL_SERVICES:-true}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # PostgreSQL Database
  postgres:
    container_name: authentication_db
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-auth_microservice_dev}
      POSTGRES_USER: ${DB_USERNAME:-auth_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-auth_user} -d ${DB_NAME:-auth_microservice_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network
    restart: unless-stopped

  # Redis Cache
  redis:
    container_name: authentication_redis
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev_redis_password}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-dev_redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network
    restart: unless-stopped

  # Prometheus (for monitoring - task 8)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - auth-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (for monitoring - task 8)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - auth-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  auth-network:
    driver: bridge