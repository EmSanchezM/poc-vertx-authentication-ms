# =============================================================================
# AUTH MICROSERVICE - DEVELOPMENT DOCKER COMPOSE
# =============================================================================
# Usage: docker-compose -f docker-compose.yml -f docker-compose.development.yml up

services:
  # Auth Microservice
  auth-service:
    container_name: authentication-ms
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "5005:5005"  # Debug port
      - "9090:9090"  # Metrics port
    environment:
      # Application configuration
      APP_ENV: development
      APP_NAME: auth-microservice
      SERVER_PORT: 8080
      LOG_LEVEL: DEBUG
      
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: auth_microservice_dev
      DB_USERNAME: auth_user
      DB_PASSWORD: dev_password_123
      DB_POOL_MAX_SIZE: 10
      DB_POOL_MAX_WAIT_QUEUE: 25
      DB_CONNECTION_TIMEOUT: 30000
      DB_IDLE_TIMEOUT: 600000
      DB_RECONNECT_ATTEMPTS: 3
      DB_RECONNECT_INTERVAL: 1000
      DB_HEALTH_CHECK_INTERVAL: 15000
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: dev_redis_password
      REDIS_DATABASE: 0
      REDIS_CONNECTION_TIMEOUT: 5000
      REDIS_COMMAND_TIMEOUT: 3000
      
      # JWT configuration (longer expiry for development convenience)
      JWT_SECRET: dev-jwt-secret-key-for-development-only-not-secure-enough-for-production
      JWT_ISSUER: auth-microservice-dev
      JWT_ACCESS_TOKEN_EXPIRY: 3600
      JWT_REFRESH_TOKEN_EXPIRY: 86400
      
      # Security configuration (relaxed for development)
      BCRYPT_ROUNDS: 8
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_LOGIN_ATTEMPTS: 10
      RATE_LIMIT_LOGIN_WINDOW_MINUTES: 15
      RATE_LIMIT_LOGIN_BLOCK_MINUTES: 30
      RATE_LIMIT_API_REQUESTS_PER_MINUTE: 200
      
      # CORS configuration (permissive for development)
      CORS_ENABLED: true
      CORS_ALLOWED_ORIGINS: "*"
      CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS,PATCH"
      CORS_ALLOWED_HEADERS: "*"
      CORS_MAX_AGE: 3600
      
      # Monitoring configuration
      METRICS_ENABLED: true
      METRICS_PORT: 9090
      HEALTH_CHECK_ENABLED: true
      HEALTH_CHECK_PORT: 8081
      
      # Logging configuration (verbose for development)
      LOG_FORMAT: pretty
      LOG_FILE_ENABLED: true
      LOG_FILE_PATH: logs/auth-microservice-dev.log
      LOG_FILE_MAX_SIZE: 5MB
      LOG_FILE_MAX_FILES: 3
      
      # External services (disabled for development)
      EMAIL_ENABLED: false
      GEOLOCATION_ENABLED: false
      
      # Development features
      DEV_MODE: true
      DEV_AUTO_RELOAD: true
      DEV_MOCK_EXTERNAL_SERVICES: true
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth-network
    restart: unless-stopped
    volumes:
      # Mount source code for hot reload in development
      - ./src:/app/src:ro
      - ./logs:/app/logs

  # PostgreSQL Database
  postgres:
    container_name: authentication_db
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: auth_microservice_dev
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_microservice_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network
    restart: unless-stopped
    # Add development-specific PostgreSQL configuration
    command: >
      postgres
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=0
      -c shared_preload_libraries=pg_stat_statements

  # Redis Cache
  redis:
    container_name: authentication_redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass dev_redis_password --loglevel verbose
    environment:
      REDIS_PASSWORD: dev_redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "dev_redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network
    restart: unless-stopped

  # Prometheus (for monitoring)
  prometheus:
    container_name: auth_prometheus
    image: prom/prometheus:latest
    ports:
      - "9091:9090"  # Changed port to avoid conflicts
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - auth-network
    restart: unless-stopped

  # AlertManager (for monitoring)
  alertmanager:
    container_name: auth_alertmanager
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - auth-network
    restart: unless-stopped

  # Grafana (for monitoring)
  grafana:
    container_name: auth_grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - auth-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter (for system metrics)
  node-exporter:
    container_name: auth_node_exporter
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
    networks:
      - auth-network
    restart: unless-stopped

  # PostgreSQL Exporter (for database metrics)
  postgres-exporter:
    container_name: auth_postgres_exporter
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://auth_user:dev_password_123@postgres:5432/auth_microservice_dev?sslmode=disable"
    networks:
      - auth-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Redis Exporter (for cache metrics)
  redis-exporter:
    container_name: auth_redis_exporter
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "dev_redis_password"
    networks:
      - auth-network
    restart: unless-stopped
    depends_on:
      - redis

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  auth-network:
    driver: bridge